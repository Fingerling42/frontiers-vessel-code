#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'''
trader_node: script handles trading strategy

At the moment there is no enhanced strategy, we simply reply on every demand we've received
'''

# Standart, System and Third Party

# ROS
import rospy

# Robonomics communication
from robonomics_msgs.msg import Offer, Demand
from ethereum_common.msg import Address, UInt256
from ethereum_common.srv import Accounts, BlockNumber
from ipfs_common.msg import Multihash


class TraderNode:
    def __init__(self):
        rospy.init_node('trader')
        rospy.loginfo('Launching trader node...')

        rospy.wait_for_service('/eth/current_block')
        rospy.wait_for_service('/eth/accounts')
        self.accounts = rospy.ServiceProxy('/eth/accounts', Accounts)()
        rospy.loginfo(str(self.accounts)) # AIRA ethereum addresses

        self.signing_demand = rospy.Publisher('/liability/infochan/eth/signing/demand', Demand, queue_size=128)
        self.signing_offer = rospy.Publisher('/liability/infochan/eth/signing/offer', Offer, queue_size=128)

        rospy.Subscriber('/liability/infochan/incoming/demand', Demand, self.on_incoming_demand)
        rospy.Subscriber('/liability/infochan/incoming/offer', Offer, self.on_incoming_offer)

        self.make_offer(Multihash(multihash='Qmea8XkcSXmvLDKES7D886pfimsWh9Vjh1ZJsoHm9MWG4C'), UInt256(uint256='100000000000000000')) # to publish an offer

        rospy.loginfo('Trader node launched.')

    # helps to reroute incoming message to handler
    def act(self, incoming):
        """ Trader reaction tactics on incoming offers and demands """
        if type(incoming) is Demand:
            self.make_offer(incoming.objective, incoming.cost) # to publish an offer

    # Callback for incoming demand messages
    def on_incoming_demand(self, incoming: Demand):
        rospy.loginfo('Incoming demand %s...', str(incoming))
        self.act(incoming)

    # Callback for incoming offer messages
    def on_incoming_offer(self, incoming: Offer):
        rospy.loginfo('Incoming offer %s...', str(incoming))

    # Calculates deadline
    # Simply adds `lifetime` to current block number
    def make_deadline(self):
        lifetime = int(rospy.get_param('~order_lifetime'))
        deadline = rospy.ServiceProxy('/eth/current_block', BlockNumber)().number + lifetime
        return str(deadline)

    # Builds a demand message and publishes it
    def make_demand(self, objective, cost):
        rospy.loginfo('Making demand...')

        demand = Demand()
        demand.model = Multihash()
        demand.model.multihash = rospy.get_param('~model')
        demand.objective = objective
        demand.token = Address()
        demand.token.address = rospy.get_param('~token')
        demand.cost = cost
        demand.validatorFee = UInt256()
        demand.validatorFee.uint256 = '0'
        demand.validator = Address()
        demand.validator.address = '0x0000000000000000000000000000000000000000'
        demand.deadline = UInt256()
        demand.deadline.uint256 = self.make_deadline()

        self.signing_demand.publish(demand)
        rospy.loginfo(demand)

    # Builds an offer message and publishes it
    def make_offer(self, objective, cost):
        rospy.loginfo('Making offer...')

        offer = Offer()
        offer.model = Multihash()
        offer.model.multihash = rospy.get_param('~model')
        offer.objective = objective
        offer.token = Address()
        offer.token.address = rospy.get_param('~token')
        offer.cost = cost
        offer.lighthouse = Address()
        offer.lighthouse.address = rospy.get_param('~lighthouse')
        offer.validator = Address()
        offer.validator.address = '0x0000000000000000000000000000000000000000'
        offer.lighthouseFee = UInt256()
        offer.lighthouseFee.uint256 = '0'
        offer.deadline = UInt256()
        offer.deadline.uint256 = self.make_deadline()

        self.signing_offer.publish(offer)
        rospy.loginfo(offer)

    # Service function allows to handle all callbacks from ROS
    def spin(self):
        rospy.spin()

if __name__ == '__main__':
    TraderNode().spin()
